##################################################
# General Project Settings
##################################################
# IP Address for the host only network, change it to anything you like
# but please keep it within the IPv4 private network range. Note that you will
# (currently) need to also edit the file in ansible/inventories/dev if you
# change this
ip_address   = "192.168.33.99"

# The project name is base for directories, hostname and alike
project_name = "webcode"

# The name of the domains to use
projects     = [
    {
        "host_name" => "webcode.dev",
    }
]

# The hostname to use (probably lower case version of project name).
# Must not be a project name to avoid an error in host aliases below.
host_name = "webcode-dev"

##################################################
# Originally generated by phansible.com
##################################################

#If your Vagrant version is lower than 1.5, you can still use this provisioning
#by commenting or removing the line below and providing the config.vm.box_url parameter,
#if it's not already defined in this Vagrantfile. Keep in mind that you won't be able
#to use the Vagrant Cloud and other newer Vagrant features.
Vagrant.require_version ">= 1.5"

# Check to determine whether we're on a windows or linux/os-x host,
# later on we use this to launch ansible in the supported way
# source: https://stackoverflow.com/questions/2108727/which-in-ruby-checking-if-program-exists-in-path-from-ruby
def which(cmd)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each { |ext|
            exe = File.join(path, "#{cmd}#{ext}")
            return exe if File.executable? exe
        }
    end
    return nil
end

Vagrant.configure("2") do |config|

    config.vm.provider :virtualbox do |v|
        v.name = "webcode"
        v.customize [
            "modifyvm", :id,
            "--name", "webcode",
            "--memory", 512,
            "--natdnshostresolver1", "on",
            "--cpus", 1,
        ]
    end

    # Every Vagrant development environment requires a box. You can search for
    # boxes at https://atlas.hashicorp.com/search.
    # https://vagrantcloud.com/ubuntu
    # Need to use trusty for now as vivid has a hostname control masking
    # https://github.com/mitchellh/vagrant/issues/5673
    # https://help.ubuntu.com
    config.vm.box = "ubuntu/trusty64"
    # Disable automatic box update checking. If you disable this, then
    # boxes will only be checked for updates when the user runs
    # `vagrant box outdated`. This is not recommended.
    #config.vm.box_check_update = false
 
    #############################################################
    # Network
    #############################################################        
    # Create a private network, which allows host-only access to the machine
    # using a specific IP. Use hostmanager to have custom domain added to host
    # machine's host file
    #config.vm.network :private_network, ip: ip_address
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.vm.define host_name do |node|
        node.vm.hostname = host_name
        node.vm.network :private_network, ip: ip_address
        #node.hostmanager.aliases = [ "myadmin.dev" ]
        node.hostmanager.aliases = []
        projects.each do |project|
            node.hostmanager.aliases.push(project["host_name"])
            node.hostmanager.aliases.push("www."+project["host_name"])
        end
    end

    # probably need to move this and set enabled = false to fix for vivid
    config.vm.provision :hostmanager
    # VVV uses Hostsupdater https://github.com/cogitatio/vagrant-hostsupdater
    # however that doesn't look like it updates the /etc/hosts of the client
    # systems.
    # Consider hosts-provisioner?
    # https://github.com/mitchellh/vagrant/wiki/Available-Vagrant-Plugins

    config.ssh.forward_agent = true

    #############################################################
    # Provider configuration
    #############################################################
    # Provider-specific configuration so you can fine-tune various
    # backing providers for Vagrant. These expose provider-specific options.
    # Example for VirtualBox:
    #
    # config.vm.provider "virtualbox" do |vb|
    #   # Display the VirtualBox GUI when booting the machine
    #   vb.gui = true
    #
    #   # Customize the amount of memory on the VM:
    #   vb.memory = "1024"
    # end
    #
    # View the documentation for the provider you are using for more
    # information on available options.

    #############################################################
    # Vagrant Push strategy
    #############################################################
    # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
    # such as FTP and Heroku are also available. See the documentation at
    # https://docs.vagrantup.com/v2/push/atlas.html for more information.
    # config.push.define "atlas" do |push|
    #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
    # end
    
    #############################################################
    # Ansible provisioning (you need to have ansible installed)
    #############################################################
    # If ansible is in your path it will provision from your HOST machine
    # If ansible is not found in the path it will be instaled in the VM and provisioned from there
    if which('ansible-playbook')
        config.vm.provision "ansible" do |ansible|
            ansible.playbook = "ansible/playbook.yml"
            ansible.inventory_path = "ansible/inventories/dev"
            ansible.limit = 'all'
            # ansible.extra_variables are in the group inventory defaults
            #ansible.verbose = 'vvv'
        end
    else
        config.vm.provision :shell, path: "ansible/windows.sh", args: ["webcode"]
    end

    #############################################################
    # Folder sync
    #############################################################
    # Share an additional folder to the guest VM. The first argument is
    # the path on the host to the actual folder. The second argument is
    # the path on the guest to mount the folder. And the optional third
    # argument is a set of non-required options.
    # http://docs.vagrantup.com/v2/synced-folders/basic_usage.html
    #config.vm.synced_folder "./"+project_name, "/home/vagrant/"+host_name, :mount_options => ["dmode=777", "fmode=666"]
    #config.vm.synced_folder "./TGIFramework", "/home/vagrant/tgif", type: "nfs"
    #config.vm.synced_folder "./"+project_name, "/home/vagrant/"+project_name, type: "nfs"
    #projects.each do |project|
    #    config.vm.synced_folder "./"+project_name+"/"+project, "/home/vagrant/"+project, type: "nfs"
    #end
    # disable default
    #config.vm.synced_folder "./", "/vagrant", type: "nfs"
    #config.vm.synced_folder ".", "/vagrant", disabled: true
    config.vm.synced_folder "./", "/vagrant", type: "nfs"
end
